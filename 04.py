
from gmpy2 import isqrt, square, is_square, powmod, add, mul

n01 = 179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581
# n02 = 648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877
# n03 = 720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929
c = 22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540
e = 65537


def prime_factor(n):
    assert n % 2 != 0

    a = isqrt(n)  # làm tròn đến phần nguyên của A = căn(N)
    # print(a)
    x2 = add(square(a), -n)  # x^2 = a^2 - n
    # print(x2)
    while not is_square(x2):
        a += 1
        x2 = add(square(a), -n)

    p = add(a, -isqrt(x2))
    q = add(a, isqrt(x2))

    return int(p), int(q)


def calculate_phi(p, q):
    return mul(p-1, q-1)

'''
def relatively_prime(phi):
    for i in range(2, phi):
        if gcd(i, phi) == 1:
            return i
'''

if __name__ == "__main__":
    (p, q) = prime_factor(n01)

    print("p = {}".format(p))
    print("q = {}".format(q))

    phi = calculate_phi(p, q)
    print("phi = {}".format(phi))
    '''
    e = relatively_prime(phi)
    print("e = {}".format(e))
    '''
    d = powmod(e, -1, phi)
    print("d = {}".format(d))
    m = hex(powmod(c, d, n01))
    print("m = {}".format(m))

# m = 0x20805907610b524330594e51d5dbbf643f09603731e9817111392d0c64e2739959a092d4daf979d387520ea7e577af9eb50a29f736925e810ab2fb4640e091a0f73252cb669d5b62b26764190ed188239fe71e1a7cb9e935d2db55c98b024e1dae46d00466163746f72696e67206c65747320757320627265616b205253412e
# So message after 0x00 is 466163746f72696e67206c65747320757320627265616b205253412e
# Message: *** Factoring lets us break RSA.
